openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
   -keyout ~/Desktop/k8s.key -out ~/Desktop/k8s.crt \
   -subj "/CN=my-address-finder.com/O=my-address-finder.com"

kubectl create secret tls address-finder-tls-secret \
   --cert=~/Desktop/k8s.crt \
   --key=~/Desktop/k8s.key
   
####################################################################################################################################################################################################################### 

### key oluşturma   
openssl genrsa -out my_key.key 2048 


### CSR sertifikası oluşturma (yukarıda oluşturduğumuz key'den üreteceğiz.)
openssl req -new -key my_key.key -out my_csr.csr -subj "/CN=ersinmertoglu@orion.com/O=PlatformTeam"


### .crt oluşturma
cat <<EOF | kubectl apply -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: USER_NAME
spec:
  groups:
  - system:authenticated
  request: $(cat my_csr.csr | base64 | tr -d "\n")
  signerName: kubernetes.io/kube-apiserver-client
  usages:
  - client auth
EOF


### Serfika oluşturduğumuzda CONDITION değeri "pending" olur. 
### Aşağıdaki komutla CONDITION  değeri "approve" olarak değiştirilir.
kubectl certificate approve my_certficate


###



### Burada private key .key uzantılı dosyada olan key
### public key ise .crt içerisinde bulunan key 
### Aşağıda user_name isimli kullanıcı .crt isimli public key'e sahip olduğu için bu adımdan sonra kubernets üzerinde işlem yapabilecek
kubectl config set-credentials {user_name} --client-certificate=my_crt.crt --client-key=my_key.key


### Kullanıcı yaratıldı ancak bunu Cluster ile iliskilendirmek gerekli
### Bunu context kullanarak yapacağız
### user_name sertifika oluştururken kullandığımız user ismi(CN)
kubectl config set-context {context_name} --cluster={cluster_name} --user={user_name}



### artık oluşturduğumuz context 'i kullanabiliriz
kubectl config use-context {context_name}


### Bu işlemler ile bir kullanıcının kimlik doğrolaması yapılarak kubernets'e bağlanması sağlandı.
### Ama  herhangi bir işlem yapamaz bu kullanıcı. Listeleme dahi yapamaz! (Her kullancı varsayılan olarak sıfır yetki ile gelir.)
### Bunun içiin Role ve RollBinding objeleri oluşturulmalı bu kullanıcı için.


#######################################################################################################################################################################################################################
Create user CSR
openssl genrsa -out user1.key 2048
openssl req -new -key user1.key -out user1.csr

Approve CSR
openssl x509 -req -in user1.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out user1.crt -days 500

Create Role or ClusterRole
cat role.yml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1 31
metadata:
namespace: test-namespace
name: user1-role
rules:
- apiGroups: ["", “extensions”, “apps”]
resources: [“deployments”, “pods”, “services”]
verbs: [“get”, “list”, “watch”, “create”, “update”, “patch”, “delete”]

Create RoleBindings
cat binding.yml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1 31
metadata:
name: user1-rolebinding
namespace: test-namespace
subjects:

kind: User
name: user1
apiGroup: “”
roleRef:
kind: Role
name: user1-role
apiGroup: “”
Use it
kubectl config set-credentials user1 --client-certificate=/root/user1.crt --client-key=user1.key

kubectl config set-context user1-context --cluster=kubernetes --namespace=test-namespace --user=user1





#######################################################################################################################################################################################################################
openssl genrsa -out ersin.key 2048

openssl req -new -key ersin.key -out ersin.csr -subj "/CN=ersin/O=Platform"

openssl x509 -signkey ersin.key -in ersin.csr -req -days 365 -out ersin.crt


kubectl create sa ersin-sa -n ersin-ns
kubectl create role ersin-role --verb=get --verb=list --verb=watch --resource=pods --namespace=ersin-ns
kubectl create rolebinding ersin-role-bind --role=ersin-role --serviceaccount=ersin-ns:ersin-sa --namespace=ersin-ns


kubectl auth can-i get 		pods --namespace ersin-ns --as system:serviceaccount:ersin-ns:ersin-sa
kubectl auth can-i watch 	pods --namespace ersin-ns --as system:serviceaccount:ersin-ns:ersin-sa
kubectl auth can-i create 	pods --namespace ersin-ns --as system:serviceaccount:ersin-ns:ersin-sa


#######################################################################################################################################################################################################################
openssl genrsa -out ersin.key 2048

openssl req -new -key ersin.key -out ersin.csr -subj "/CN=ersin/O=Platform"

openssl x509  req -in ersin.csr -CA -CA_LOCATION/ca.crt -CAkey CA_LOCATION/ca.key -CAcreateserial -out ersin.crt  -days 500




#######################################################################################################################################################################################################################
#############################################
#											#
#			STACKOVERFLOW					#
#											#	
#############################################

mkdir cert && cd cert
# create private key
openssl genrsa -out johndoe.key 2048
# create certificate signing request (CSR)
openssl req -new -key johndoe.key -out johndoe.csr -subj "/CN=johndoe/O=cka"
# sign the CSR with the Kubernetes cluster certificate authority (CA)
openssl x509 -req -in johndoe.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out johndoe.crt -days 365
# create user in Kubernetes
kubectl config set-credentials johndoe --client-certificate=johndoe.crt --client-key=johndoe.key
# switch to the new user
kubectl config set-context johndoe-context --cluster=kind --user=johndoe
# check
kubectl config view
#######################################################################################################################################################################################################################